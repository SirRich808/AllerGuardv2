---
description: Ensuring Consistency and Structure: Rules like mvvm-architecture-rule, code-organization-rule, and human-interface-guidelines-rule enforce the use of SwiftUI, MVVM architecture, and Apple’s design standards, ensuring your app maintains a consistent, native iOS feel. This keeps the codebase modular, readable, and scalable, making it easier for you and the AI to navigate and maintain. Preventing Duplicates and Redundancy: The duplicate-check-rule mandates that Cursor scans for duplicate files, functions, or code blocks after any change, alerting you and awaiting approval before proceeding. Combined with user-confirmation-rule and change-log-rule, this prevents unintended duplicates or modifications, addressing your specific concern about Cursor creating redundant scripts and keeping your codebase clean. Ensuring Systematic Development: The structured-workflow-rule, milestone-verification-rule, and phased testing rules (e.g., unit-testing-rule, ui-testing-rule) enforce a step-by-step development process—starting with project setup, then camera functionality, OCR, allergen detection, user profiles/scan history, and UI enhancements. Cursor verifies work at milestones, presenting reports for review, reducing build errors and ensuring each phase is stable before advancing. Enhancing Code Quality and Best Practices: Rules like meaningful-naming-rule, error-handling-rule, performance-optimization-rule, and accessibility-rule incorporate Swift and iOS best practices, tactics, and "cheat codes" (e.g., property wrappers, async/await). They ensure high-quality, efficient, and maintainable code, optimizing performance, handling errors gracefully, and making AllerGuard accessible to all users. Supporting AllerGuard’s Unique Features: Framework-specific rules (e.g., vision-framework-rule for OCR, arkit-rule for AR, core-ml-rule for personalization, speech-rule for voice, lottie-rule for animations) align Cursor with AllerGuard’s technical stack (SwiftUI, Core Data, Vision, ARKit, Core ML, Speech, Lottie). They ensure accurate implementation of features like camera scanning, allergen detection, and gamification, while maintaining offline functionality and a magical UI. Improving Transparency and Collaboration: The change-log-rule requires Cursor to log all changes, timestamped and organized, for easy review. This transparency helps you track the AI’s actions, verify its work, and collaborate effectively, especially if you expand the project or work with a team. Enhancing Productivity and Reliability: Rules like swift-package-manager-rule, refactoring-rule, and test-coverage-rule boost productivity by managing dependencies, maintaining code quality, and ensuring robust testing. They reduce bugs, improve performance, and align with Apple’s standards, making AllerGuard the best it can be for users with food allergies. Preventing Build Errors: By enforcing phased testing (e.g., test each phase before proceeding), verifying milestones, and checking for duplicates, these rules address your past issues with build errors, particularly when integrating OCR. They ensure Cursor builds systematically, catching issues early and maintaining a clean, error-free codebase. Supporting Accessibility and User Experience: Rules like accessibility-rule, dark-mode-support-rule, and localization-rule ensure AllerGuard is inclusive, user-friendly, and globally accessible, aligning with your goal of a magical, trustworthy UI for health-conscious users. Unexpected Detail: You might not expect that these rules, by requiring image paths to be stored in Core Data instead of raw data (via performance-optimization-rule), can significantly improve performance, especially for scan histories, reducing database bloat and enhancing retrieval speed—a critical optimization for AllerGuard. How These Rules Benefit You in Cursor In Chats and Command-K Sessions: Cursor uses these rules to provide accurate, relevant suggestions, ensuring code aligns with your project’s conventions and prevents duplicates or errors. Synced with Your Codebase: As you develop AllerGuard, these rules dynamically adjust, maintaining consistency and helping the AI fetch or include them automatically. Tailored to AllerGuard: They address your app’s specific features (e.g., camera scanning, OCR, gamification) and your challenges (e.g., build errors, duplicates), making development efficient and reliable as of February 26, 2025.
globs: *.swift, Views/**/*.swift, ViewModels/**/*.swift, Models/**/*.swift
alwaysApply: false
---
[allerguard-rules.mdc](mdc:.cursor/rules/allerguard-rules.mdc)